name: Django CI/CD Pipeline

on:
  push:
    branches:
      - Abi

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Apply migrations
        run: python manage.py migrate

      - name: Run tests
        run: python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test  # Run deployment only if the test job is successful
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH }}

      - name: Check for merge conflicts
        run: |
          if git ls-files -u | grep -q '^[^ ]'; then
            echo "Merge conflicts detected. Please resolve them before deploying."
            exit 1
          fi

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e  # Exit on any error
            cd /home/ubuntu

            # Add GitHub to known_hosts to avoid SSH key verification prompts
            ssh-keyscan github.com >> ~/.ssh/known_hosts

            # Check if the directory is a git repo; if not, clone it
            if [ ! -d "geneFlow_v2/.git" ]; then
              git clone git@github.com:karamchandanideepak111/geneFlow_v2.git
            fi

            # Pull the latest changes
            cd geneFlow_v2
            # git config pull.rebase false  # or false if you prefer merging
            git pull origin Abi

            # Check if Python 3.12 is installed
            if ! command -v python3.12 &> /dev/null; then
              echo "Python 3.12 is not installed. Please install it before running this script."
              exit 1
            fi

            # Ensure python3.12-venv is installed
            if ! dpkg -l | grep -q python3.12-venv; then
              echo "Installing python3.12-venv..."
              sudo apt update
              sudo apt install -y python3.12-venv
            fi

            # Check if virtual environment exists, remove it if necessary
            if [ -d "venv" ]; then
              echo "Removing existing virtual environment."
              rm -rf venv
            fi

            # Create a new virtual environment
            python3.12 -m venv venv
            echo "Virtual environment created."

            # Activate virtual environment
            source venv/bin/activate

            # Upgrade pip and install dependencies
            pip install --upgrade pip
            pip install -r requirements.txt

            # Apply database migrations
            python manage.py migrate

            # Optionally run the server or restart a service
            # Uncomment if you want to run the server
            # python manage.py runserver 0.0.0.0:8000
            # Restart the web service if necessary
            # sudo systemctl restart your-service-name
          EOF
