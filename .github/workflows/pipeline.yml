name: Django CI/CD Pipeline
 
on:
  push:
    branches:
      - Abi
 
 
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
 
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10' # or whichever version you're using
 
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
 
    - name: Apply migrations
      run: |
        python manage.py migrate
 
    - name: Run tests
      run: |
        python manage.py test
 
  deploy:
    runs-on: ubuntu-latest
    needs: test  # Run deployment only if the test job is successful
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.3  # Set up SSH agent
      with:
        ssh-private-key: ${{ secrets.EC2_SSH }}  # Use the SSH key stored in GitHub secrets
    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -e
          # Ensure python3.10, git, and pip are installed
          which python3.10 || sudo yum install python3.10 -y  # For Amazon Linux
          which git || sudo yum install git -y
          which pip3 || sudo yum install python3.10-pip -y
          
          # Upgrade pip
          python3.10 -m pip install --upgrade pip
          
          cd /home/ec2-user
          
          # Add GitHub to known_hosts to avoid host key verification issues
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          
          # Check if the directory is a git repo; if not, clone it
          if [ ! -d "geneFlow_v2/.git" ]; then
            git clone git@github.com:karamchandanideepak111/geneFlow_v2.git
          fi

          cd geneFlow_v2
          
          # Set Git configuration to avoid rebase conflicts
          git config pull.rebase false  # merge
          
          # Pull the latest code from the specified branch
          git pull origin Abi
          
          # Check if the virtual environment exists, otherwise create it
          if [ ! -d "venv" ]; then
            python3.10 -m venv venv
          fi
          
          # Activate the virtual environment
          source venv/bin/activate
          
          # Install dependencies from requirements.txt
          pip install -r requirements.txt
          
          # Apply database migrations
          python manage.py migrate
        EOF
