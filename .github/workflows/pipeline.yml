name: Django CI/CD Pipeline
 
on:
  push:
    branches:
      - Abi

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'  # Specify your Python version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Apply migrations
      run: |
        python manage.py migrate

    - name: Run tests
      run: |
        python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test  # This ensures deployment runs only after the test job is successful
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3  # Set up the SSH agent
      with:
        ssh-private-key: ${{ secrets.EC2_SSH }}  # Use the SSH private key stored in GitHub secrets

    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -e  # Exit on error

          # Enable Python 3.9 module and install required packages
          sudo dnf module enable python:3.9 -y
          sudo dnf install -y python3.9 git

          # Install pip for Python 3
          sudo dnf install -y python3.9-pip

          # Upgrade pip
          python3.9 -m pip install --upgrade pip

          cd /home/ec2-user

          # Add GitHub to known_hosts to avoid host key verification issues
          ssh-keyscan github.com >> ~/.ssh/known_hosts

          # Clone the repo if it doesn't exist, else pull the latest changes
          if [ ! -d "geneFlow_v2/.git" ]; then
            git clone git@github.com:karamchandanideepak111/geneFlow_v2.git
          fi

          cd geneFlow_v2

          # Ensure we're on the correct branch
          git checkout Abi
          git config pull.rebase false  # Merge strategy
          git pull origin Abi  # Pull the latest code

          # Set up the virtual environment if it doesn't exist, activate it
          if [ ! -d "venv" ]; then
            python3.9 -m venv venv
          fi
          source venv/bin/activate

          # Install/update dependencies
          pip install -r requirements.txt

          # Apply any database migrations
          python manage.py migrate

          # Optional: Restart the server (if applicable, depending on how you're running it)
          # sudo systemctl restart <your_service_name>
        EOF
