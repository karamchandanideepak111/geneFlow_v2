name: Django CI/CD Pipeline

on:
  push:
    branches:
      - Abi

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'  # Specify your Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Apply migrations
        run: |
          python manage.py migrate

      - name: Run tests
        run: |
          python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test  # Run deployment only if the test job is successful
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3  # Set up SSH agent
        with:
          ssh-private-key: ${{ secrets.EC2_SSH }}  # Use the SSH key stored in GitHub secrets

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e  # Exit on any error

            # Move to deployment directory
            cd /home/ubuntu/geneFlow_v2 || exit

            # Add GitHub to known_hosts to avoid SSH key verification prompts
            ssh-keyscan github.com >> ~/.ssh/known_hosts

            # Pull the latest changes
            git pull origin Abi

            # Check if Python 3.12 is installed
            if ! command -v python3.12 &> /dev/null; then
              echo "Python 3.12 is not installed. Please install it before running this script."
              exit 1
            fi

            # Ensure python3.12-venv is installed
            if ! dpkg -l | grep -q python3.12-venv; then
              echo "Installing python3.12-venv..."
              sudo apt update
              sudo apt install -y python3.12-venv
            fi  # Closing the if statement

            # Check if virtual environment exists, if so remove it and create a new one
            if [ -d "venv" ]; then
              echo "Removing existing virtual environment."
              rm -rf venv  # Remove existing virtual environment
            fi
            
            # Create a new virtual environment
            python3.12 -m venv venv  # Create virtual environment
            echo "Virtual environment created."
            
            # List the directory contents for debugging
            ls -la

            # Activate virtual environment
            source venv/bin/activate

            # Upgrade pip and install dependencies
            pip install --upgrade pip
            pip install -r requirements.txt

            # Apply database migrations
            python manage.py migrate

            #Run server
            #python manage.py runserver

            # Optional: Restart the web server or application service if needed
            # sudo systemctl restart your-service-name
          EOF
